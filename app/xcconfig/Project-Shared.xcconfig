//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 2/8/19
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Always Search User Paths (Deprecated)
// 
// This setting is deprecated as of Xcode 8.3 and may not be supported in future
// versions. It is recommended that you disable the setting.
// 
// If enabled, both `#include <header.h>`-style and `#include "header.h"`-style
// directives search the paths in `USER_HEADER_SEARCH_PATHS` before
// `HEADER_SEARCH_PATHS`. As a consequence, user headers, such as your own `String.h`
// header, have precedence over system headers when using `#include <header.h>`. This is
// done using the `-iquote` flag for the paths provided in `USER_HEADER_SEARCH_PATHS`. If
// disabled and your compiler fully supports separate user paths, user headers are only
// accessible with `#include "header.h"`-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default. Disabling it
// is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO


CLANG_CXX_LANGUAGE_STANDARD = gnu++0x

CLANG_CXX_LIBRARY = libc++

CLANG_ENABLE_MODULES = YES

CLANG_ENABLE_OBJC_ARC = YES

CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

CLANG_WARN_BOOL_CONVERSION = YES

CLANG_WARN_CONSTANT_CONVERSION = YES

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR

CLANG_WARN_EMPTY_BODY = YES

CLANG_WARN_ENUM_CONVERSION = YES

CLANG_WARN_INFINITE_RECURSION = YES

CLANG_WARN_INT_CONVERSION = YES

CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR

CLANG_WARN_SUSPICIOUS_MOVE = YES

CLANG_WARN_UNREACHABLE_CODE = YES



// Code Signing Identity
// 
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY = -



// Strip Debug Symbols During Copy
// 
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be strippedâ€”use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = NO



ENABLE_STRICT_OBJC_MSGSEND = YES

GCC_C_LANGUAGE_STANDARD = gnu99

GCC_NO_COMMON_BLOCKS = YES

GCC_WARN_64_TO_32_BIT_CONVERSION = YES

GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR

GCC_WARN_UNDECLARED_SELECTOR = YES

GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE

GCC_WARN_UNUSED_FUNCTION = YES

GCC_WARN_UNUSED_VARIABLE = YES

// macOS Deployment Target
// 
// Code will load on this and later versions of macOS. Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for `null`
// function pointers or specific system versions before calling newer APIs.

MACOSX_DEPLOYMENT_TARGET = 10.13



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = macosx
